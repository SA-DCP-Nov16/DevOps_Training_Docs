
###############
16th Jan. 2024
###############	

	Kubernetes ::::
	
		- It is a Open-Source Container Orchestration Tool 
		- Kubernetes is used to Deploy any type of Containers.
		- It is used to ensure high availability of the Applications/services running thru Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- It supports Auto-Scaling & Load Balancing.
		- Self-Healing
		
	
	Kubernetes Architecture
	Kubernetes Controller Object 
		Deployment Controller 
	Namespaces 
	Volume 
	Overview of Kubernetes Services
		

	Kubernetes Architecture:
		
		Master / WorkerNode Architecture 
		
		Kubernetes_Master(VM)	--> It used to define the deployments and schedule the deployments 
			WorkerNode1(VM) 	--> It is used to deploy the applications containers/pods
			WorkerNode2(VM)
			WorkerNode3(VM)
		
		Container 
	
	Terminologies :::
	
		Images 
		Container
		pod 		==> It is a Atomic Unit of Task/schedule in Kubernetes.
						It is term used to refer the container in kubernetes
		Container Registry 
		Kubernetes Cluster ==> It is collection of workernodes.
		
		Kubernetes_Master(VM)	
			Kubernetes_Cluster1
				WorkerNode1(VM) 	
				WorkerNode2(VM)
				WorkerNode3(VM)		
			Kubernetes_Cluster2
				WorkerNode1(VM) 	
				WorkerNode2(VM)
				WorkerNode3(VM)			

	Kubernetes Architecture::::
	
Architecture ::::

Master Components

Below are the main components on the Kubernetes master node:

etcd cluster – a simple, distributed key value storage which is used to store the Kubernetes cluster data (such as number of pods, their state, namespace, etc), API objects and service discovery details. It is only accessible from the API server for security reasons. 

kube-apiserver – Kubernetes API server is the central management entity that receives all REST requests for modifications (to pods, services, replication sets/controllers and others), serving as frontend to the cluster. 
Also, this is the only component that communicates with the etcd cluster, making sure data is stored in etcd and agrees with the service details of the deployed pods.

kube-controller-manager – runs several distinct controller processes in the background (for example, replication controller controls number of replicas in a pod, endpoints controller populates endpoint objects like services and pods, and others) to regulate the shared state of the cluster and perform routine tasks. 

cloud-controller-manager – is responsible for managing controller processes with dependencies on the underlying cloud provider (if applicable). For example, when a controller needs to check if a node was terminated or set up routes, load balancers or volumes in the cloud infrastructure, all that is handled by the cloud-controller-manager.

kube-scheduler – helps schedule the pods (a co-located group of containers inside which our application processes are running) on the various nodes based on resource utilization. It reads the service’s operational requirements and schedules it on the best fit node. 




Node (worker) components

Below are the main components found on a (worker) node:

kubelet – the main service on a node, regularly taking in new or modified pod specifications (primarily through the kube-apiserver) and ensuring that pods and their containers are healthy and running in the desired state. This component also reports to the master on the health of the host where it is running.

kube-proxy – a proxy service that runs on each worker node to deal with individual host subnetting and expose services to the external world. It performs request forwarding to the correct pods/containers across the various isolated networks in a cluster.


Managed Kubernetes Services :::

AWS 	: ECS,ECR,EKS

AZURE 	: ACS,ACR,AKS 

GCP 	: GCS,GCR,GKS

Installation & Configuration of Kubernetes Master and WorkNodes

	- MiniKube 		==> Lightweight version of Kubernetes - Just of limited no. of Deployment / Learning purpose.
	
	- Kubeadm		==> Utility to create/Manage the Kubernetes installation and configurations



Installation & Configuration of Kubernetes Master and WorkNodes:::

		Kubernetes_Master(VM)
			Kubernetes_WorkerNode1(VM)
			Kubernetes_WorkerNode2(VM)
		
		
		1. Launch the required no. of VMs (1+2) 
		2. Open all the required ports 
		
		Commands to be executed in all the Nodes (Master & WorkerNodes)
			3. Define a Unique Host Name for each Node 
			4. Install Docker 
			5. Install ContainerD  # CRI
			6. Install Kubeadm,kubelet,kubectl
			7. Disable Swap 		
			
		Commands to be executed only in Master Node

			8. kubeadm init 		# Initialize Kubernetes Master 
			9. Install Network Plugins for Kube-Proxy

			
		Commands to be executed only in Worker Nodes

			10. kubeadm join 		# To join the Worknodes with Master 


Next:

		Working with Pods 
		Deployments 
		Services 
		Namespaces 
		Hostpath Volumes 

###############
18th Jan. 2024
###############	

		Terminologies :::
		
			kubectl 		# Command Line Utility used to interact with Kubernetes 
			kubeadm 		# It is used to Initialize / Config the Kubernetes_Master & Cluster 
			Kubernetes_Cluster 	# It is Collection K8s WorkerNodes 
			pods 		
			
		Working with Pods 
		Deployments 
		Services 
		Namespaces 
		Hostpath Volumes 	

			Tomcat(8080)/Nginx(80) ???

		Working with Pods ::

			Manifest file --> *.yaml Script.
			
			Yaml Scripts are Declarative Scripts
					key:value pair
					
			Create and work with pods using Kubectl.


			Kubernetes Namespaces are logical partitioning of the Cluster.
			
			Create Pods ::
				Write a Manifest File. - *.yaml
				
				
			
###############
19th Jan. 2024
###############	

		Deployment Controller Object 
		
		- Is used to 
		
			- Create replicas/copies of pod 				==		3 replicas of Pod.		v1.0 ===> v1.1		
			- Upgrade Pod deployment version 
			- Downgrade the Pod deployment version 
			- Scale Up 
			- Scale Down
			- It helps update the version of applications without any downtime
					- It is possible using the Deployment Strategy
								Rolling Update Deployment Strategy.
									It will update the image version on by one.
								
								
								
			
Use Case :		Java Web Application 
		
		Application Life Cycle 
		
		1. Coded 
		2. Build 
		3. Create Artifacts 									mywebapp.war_v1.0 / v1.1 / v1.2 / v1.3 / ....
		3. Deploy the artifacts to the target environment	
			Test : QA / UAT / Prod
			
		Containerized Work flow :	
		4. Using Docker Create Application Image				mywebapp_Image_v1.0 / v1.1 / v1.2 / v1.3 / ....
				Docker Commit 
				Docker Build (Dockerfile)
		5. Push the Application Image to DockerHub 
		6. Use Kubernetes to Deploy the Images in the Target Environment 	mywebapp_Image_v1.0 / v1.1 / v1.2 / v1.3 / ....
			Test : QA / UAT / Prod			
		
		
		
		replicas in Manifest file is used to create replicaset 
		
		Application Life Cycle 
		
		1. Coded 
		2. Build 
		3. Create Artifacts 									mywebapp.war_v1.0 / v1.1 / v1.2 / v1.3 / ....
		3. Deploy the artifacts to the target environment	
			Prod

			Prod Server1,2,3,4,5 -- Publish over SSH 
			
			Deployment :::
			
				-> Coping the Artifacts from one server to another 
				
				Copy of a Application will be deployed in more than one production server. 


		Kube_Master 
			Kube_WorkerNode1,2
			
			In kubernetes, the copy of pods will be deployed in the available workernodes.

			Deployment Controller Object 
		
		- Is used to 
		
			- Create replicas/copies of pod 				==		3 replicas of Pod.		v1.0 ===> v1.1		
			- Upgrade Pod deployment version 
			- Downgrade the Pod deployment version 
			- Scale Up 
			- Scale Down
			- It helps update the version of applications without any downtime
					- It is possible using the Deployment Strategy
								Rolling Update Deployment Strategy.
									It will update the image version on by one.
			


		Namespaces :::
		
			Logical Partitioning of the Cluster :::
			
		Kubernetes_Master 
			Cluser1
				WN1,2,3,4,5
			
			
		Hostpath Volumes :::
		
				It is used to maintain the persistant data.
				
Next :::				
		Overview of Kubernetes Services :::
		
		Demo :::
			docker/Kubernetes ==> Jenkins
			
			CICD Pipeline :::
			
		Monday :::
		
			- Pipeline ::
			
			J_Master
			 J_Slave 
			QA_Server
			 
			build & deploy using jenkins
			
			create docker image using dockerfile.
			
###############
22nd Jan. 2024
###############	

		CICD Pipepline ::::
		
		Application : Builds, Deployments 
		
		DevOps Stage ::
		
		C_Development 
		
		C_Integration 
		C_Testing 
		C_Delivery
		C_Deployment
		
		1. Infra-Structure Provisioning 
		2. Configuring the required tools in all the servers / Integration of Servers 
		3. Create the CICD Pipeline 
		4. Onboard the Applications 
		
		
		Jenkins_Master 		==> Used to create CICD Pipeline Project and scheduling 
			Jenkins_Slave 	==> Used to Perform the Build - Compile & Create Artifacts.
		QA_Server 			==> Deployed the Artifacts	- Publish over SSH.
			
			
		Containerization ::::
			
		Jenkins_Master 		==> git,jdk, Jenkins 				
							==> Used to create CICD Pipeline Project and scheduling  
			Jenkins_Slave(Build_Server) 	==> git, jdk, maven, docker
							==> Used to Perform the Build - Compile & Create Artifacts, Create/Build Docker Images			
		Kubernetes_Master(VM)					==> Deployment  ==> docker,containerD,Kubeadm,kubectl,kubelet
			Kubernetes_WorkerNode1
			Kubernetes_WorkerNode2
			
		How to Integrate Kubernetes_Master to Jenkins_Master ???
			SSH Protocol
			
			@@@@@@Task 1 ::: 			
			1. Steps to Integrate Kubernetes_Master to Jenkins_Master ???
		
		
		3. Create the CICD Pipeline Project :::
		
		Pipeline :
			Stages ::: (Collection of Tasks)
			
		CICD Pipeline :::
pipeline {
	   agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				echo 'Perform Build'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
				sh "mvn clean package"
            }
        }
        stage('Deploy to Tomcat - Server') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
            }
        }
    }
}				
		Stages :::
		
			Stage 1 : SCM_Checkout			# Bring the latest code changes from src_code repo to Jenkins_Slave_Node
			Stage 2 : Application_Build		# Compile the code & Create Artifacts in Jenkins_Slave_Node
			Stage 3 : Docker_Build			# Build Docker Application Image in Jenkins_Slave_Node using the artifacts created in Jenkins_Slave_Node
			Stage 4 : Login to DockerHub	# From Jenkins_Slave_Node, using Docker Credentials
			Stage 4.1 : Publish Docker Image to DockerHub 	# Push the Docker Application Image from Jenkins_Slave_Node to DockerHub Registry
			Stage 5 : Deploy the Application Image in Kubernetes Cluster 	# Create Manifest file for Deployment Contoller Object.
																			# NodePort Service to expose the pods to internet 
			


				@@@@@@Task 2 ::::
				Steps to identify all the pre-requisites and Commands to be used in all the stages.
				
				

			@@@@@@Task 1 ::: 			
			1. Steps to Integrate Kubernetes_Master to Jenkins_Master ???
			@@@@@@Task 2 ::::
			2. Steps to identify all the pre-requisites and Commands to be used in all the stages.

		Next ::::

			
			Best Practices ::: To Create CICD Pipelines ::::
			
				1. Overview of Kubernetes Services/Volumes 
				
				2. Namespaces 
				
			Ansible/Terraform :::
			
			
		Kubernetes_Master(VM)	
			Kubernetes_Master1(VM)		# Active Master Node 	
				Kubernetes_Cluster1
					WorkerNode1(VM) 	
					WorkerNode2(VM)
					WorkerNode3(VM)		
				Kubernetes_Cluster2
					WorkerNode1(VM) 	
					WorkerNode2(VM)
					WorkerNode3(VM)			
			Kubernetes_Master2(VM)		# Active Master Node 	
				Kubernetes_Cluster1
					WorkerNode1(VM) 	
					WorkerNode2(VM)
					WorkerNode3(VM)		
				Kubernetes_Cluster2
					WorkerNode1(VM) 	
					WorkerNode2(VM)
					WorkerNode3(VM)				
			
			
		
