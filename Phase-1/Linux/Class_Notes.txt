
StarAgile DCP : Started on : 16th Nov. 2023 
https://github.com/SA-DCP-Nov16/DevOps_Training_Docs

https://github.com/SA-DCP-Nov16/DevOps_Training_Docs

########################
16th Nov. 2023
########################
DevOps Fundamentals :::

Module 1

DevOps Overview :::

AWS Fundamentals
DevOps on Cloud (AWS)
Linux Fundamentals

DevOps Overview :::

	DevOps :::
	
	Waterfall & Agile Method ??
	
	Stages of DevOps ????
	
	DevOps ::::
	
		- Software --> 
		
			- Application Software 
					--> Desktops Applications  --> Billing system
					--> Web Applications       --> ECommerce, Online Banking 
					--> Mobile Applications	   --> Mobile Apps
			- System  Software 
			
		SDLC -> Software Development Life Cycle :::
		
				--> Desktops Applications  --> Billing system
				
			- Requirement Analysis 
			- Design 
			- Coding / Development
			- Testing 
			- Implementation 
			- Maintainence/Monitoring
			
		1. Waterfall Model ::: - 	Linear in approach
									It strictly follows top down approach
									It is meant for Monolith Application Architecture
				
				--> Desktops Applications  --> Billing system BASIC / COBOL 
					Billing Application :
						- Inventory Mgmt
						- Price Mgmt
						- User-Interface - CLI
						- Order placement 
						- Payment 
							
				Project 1:		
					- Requirement Analysis 		==> 9 months to complete this project.
					- Design 
					- Coding / Development			mid of 4th Month 
					- Testing 
					- Implementation 
					- Maintainence/Monitoring		
					
				Project 2:		
					- Requirement Analysis 		==> 
					- Design 
					- Coding / Development			
					- Testing 
					- Implementation 
					- Maintainence/Monitoring	

				
				
				Tele-comm Domain :: 
					SP1 --> Introduce a new offer to their customers 
							-> IT Team to implement this ASAP
					SP2 --> 
					
		2. Agile Methodology :::
		
				--> Desktops Applications  --> Billing system BASIC / COBOL 
				
					Billing Application :
						Functions/Modules/Iterations
							- Inventory Mgmt
							- Price Mgmt
							- User-Interface - CLI
							- Order placement 
							- Cash-Payment
							- Online-payment
													
			Iterations 1:  Inventory Mgmt
				- Requirement Analysis 
				- Design 
				- Coding / Development
				- Testing 
				- Implementation*** 
				- Maintainence/Monitoring***	
		
			Iterations 2:  - Price Mgmt
				- Requirement Analysis 
				- Design 
				- Coding / Development
				- Testing 
				- Implementation*** 
				- Maintainence/Monitoring***		
	
			Iterations n:  - Online-payment
				- Requirement Analysis 
				- Design 
				- Coding / Development
				- Testing 
				- Implementation*** 
				- Maintainence/Monitoring***
				
			Using Agile Methodologies we can able to achieve :::
					Continous Development 
					Continous Integration
					Continous Testing 
					Continous Delivery  to Production
								- This Expect Manual approval for Production Release.
			But we cannot achieve :::
					Continous Deployment to Production
								- This Doesnt expect any manual approval for Production Release. We can automate Production Release without any manual intervension.


		3. DevOps :::
		
			What is DevOps ????
			
				DevOps is a Software Development Strategy, which helps to promote the collaboration between the Development Team and Operations Team to achieve Continous Development, Continous Integration, Continous Testing, Continous Delivery, Continous Deployment and Continous Monitoring in more automated fashion.
				
			
			Teams ::
			
				DevOps Team 
					1. Infra-Structure Management Team 
					2. Application Development Team 
					3. Testing Team
					4. Release Management Team 
					5. Production Support Team
					6. Production Monitoring Team
					7. Security Team
				
				
			Stages of DevOps ::
			
					Infra-Structure Management ::
							IAC - Ansible & Terraform 
							
					Continous Development ::
						- It is capability of Application Development to continously develop the code.
						- Increase the productivity of Developers.
						Developer --> Role of developer ???
							Coding the Business Application.
							- Create source code 
							- Manually build the code 
							- Create Artifacts
							- Manually perform unit testing 
							- Promote the code to Testing Environments 
							- Notify the testing team to do further testing
							
						Using DevOps Approach :::
							- Create source code Update the code in a source code repository 
							
						DevOps take the responsibility : 
							- Automate build the code 
									Application Build :
										It is process of compiling the source code and creating artifacts.
										Artifacts are - Binaries (*.war,*.jar,*.exec,*.dll)										
							- Automate Create Artifacts
							- Automated unit testing 
							- Automate Promote the code to Testing Environments 
							- Automate the Notification - Notify the testing team to do further testing
					
						Tools : 
							Eclipse based IDEs(Integrated Development Environment) - Eclipse, Pycharm, Intellij
						DevOps Tools ::
							GIT, Jenkins, Build Tools(Maven,JUnit)
							
					Continous Integration ::
						- It is capability of Application Development to continously integrate their code change for further testing without waiting for any dependencies.
						
						Tools ::
							- Jenkins, Ansible, Docker, Kubernetes 
						
					Continous Testing ::
						- To enable Automated Testing ::
						- QA Testing
						- UAT Testing 
						
						Tools ::
							- Jenkins, Junit/TestNG/Selenium 						
						
					Continous Delivery  & Continous Deployment
					
						Tools : Jenkins, Ansible, Docker, Kubernetes 
					
						- Both are related to Production Release :
						
						Continous Delivery : 					Continous Delivery  to Production
								- This Expect Manual approval for Production Release.						

								Banking Application :
									Online Banking :::
										release new feature  to Production Environment:::
										
										Open a Production Deployment Window :: (4 - 6 Hrs) - Non-Business Hours
											Take manual approval from all stake holders for this release 
											Thorough Testing in Production Environment.
												If anything goes wrong :
													Fix the Issue. 
													Revert
									
						Continous Deployment :	
								- Can be achieved with the matured DevOps Strategies/Process.
								- This Doesnt expect any manual approval for Production Release. We can automate Production Release without any manual intervension.
								- No Downtime.

								Facebook 
								Netflix 
								amazon 
								google 							
							
					Continous Monitoring :
							
							- Mainly used to achieve Business Continuity.
							
							- Infra-Structure Monitoring
									Monitor the Production Servers -- Memory/CPU utilization & Traffic 
									
							Tools :: 
									Jenkins,Prometheus,Grafana,
									
							- Application Monitoring 
									AppDynamics
									
					
			DevOps Tools ::

				Self Managed - Open Source Tools :
					
				
				Manage Services from Service Providers 
				
					AWS 	
					AZURE 
					GCP 

########################
17th Nov. 2023
########################

		DevOps Fundamentals 
		
		
		AWS Fundamentals
		
			Teams ::
			
				DevOps Team 
					1. Infra-Structure Management Team ==> Server Provisioning & Configuration 
					2. Application Development Team 
					3. Testing Team
					4. Release Management Team 
					5. Production Support Team
					6. Production Monitoring Team
					7. Security Team
					
					
		Stages of DevOps ::::
		
			Pre-requisites for Effective DevOps Implementation.
			
			Application Development & Deployment
			
			Application Architecture 
			
				SDLC Perspective :
				
					1. Monolith Application Architecture :
						- It is a tightly coupled Application Architecture
						- It is difficult to Add More features quickly
						- All the Application Dependencies are closely couple with each other.
						
					Billing Application :
						Functions/Modules/Iterations
							- Inventory Mgmt
							- Price Mgmt
							- User-Interface - CLI
							- Order placement 
							- Cash-Payment
							- Online-payment		

					2. Micro-Service Based Application Architecture :
						- A smallest unit of task
						- It is loosely coupled application 
						- It allows the developers to independently develop, test, and develop the changes to production.
						- Eleminate all the dependencies and enable independent development and implementation.
			
				www.amazon.com 
				
				- Sign-up			- Micro-Service1 - Developer - Independently code, test and Release the changes to Production.
				- Sign-In 
				- Search-products
				- Add to Cart 
				- Place the order 
				- payment 
				- confirm the order 
				- track the order 
					
					3- tier architecture  - Front-End Design,Application Logic, BackEnd(Database)
					
			DevOps Tools ::

				Self Managed - Open Source Tools :
					
				
				Manage Services from Service Providers 
				
					AWS 	
					AZURE 
					GCP 

			
			DevOps is all about :::
			
					People		==> 	
					Process		==>
					Tools		==>
					
			
			Architect ==> Client ==> Devops 
			
			Teams ::
			
				DevOps Team 
					1. Infra-Structure Management Team ==> Server Provisioning & Configuration 
					2. Application Development Team 
					3. Testing Team
					4. Release Management Team 
					5. Production Support Team
					6. Production Monitoring Team
					7. Security Team

			Assessment :::
			Identify the scope for automation.
			
			
			Roles and Responsibilities of DevOps Team :
			
				DevOps Associate 
				Sr. DevOps Associate
				DevOps Engineer
				Sr. DevOps Engineer
				DevOps Lead 
				Sr. DevOps Lead
				DevOps Architect
				Sr. DevOps Architect
				DevOps Consultant 
			
			Waterfall - Agile - DevOps - DevSecOps - SRE - GitOps - MLOps - AIOps
			
			
			
		AWS Fundamentals	 ::: 
		
			Basic services of AWS.
			
				Cloud Platform ???
				
				Cloud Computing ::: What & Why ???
				
				Type of Services provided ?
					IAAS
					PAAS
					SAAS 
					
				Cloud Service Deployment Model ::
				
					Public Cloud
					Private Cloud 
					Hybrid Cloud 
					Community Cloud
				
				
			On-Premises Platform ::::
				
			Cloud Platform :::
			
				AWS 
				Azure 
				GCP 
				Digital Ocean
				
				
			Explore AWS Cloud Platform :
			
				1. Create AWS Account 
						Free Tier - 12 Months.
							Valid/Active - Mobile Number, Email_ID, Credit/Debit Card(Eligible for International Transaction) 
			
			Lab Pre-Requisites for this Trainings ::

				1. Create GITHUB(Remote Repository to maintain files and folders) Account.
						https://github.com/
				2. Create AWS Account  https://aws.amazon.com/console/
						Free Tier - 12 Months.
							Valid/Active - Mobile Number, Email_ID, Credit/Debit Card(Eligible for International Transaction) 
							
				3. Create Virtual Machines(EC2 Instances) and Connect to VMs
							
				
########################
20th Nov. 2023
########################			
			
		AWS Fundamentals :::
		
			Login to AWS Account :
				Through AWS Console we can login to AWS Account...
				
				
				-  root id 
				-  IAM User ID  
				
				AWS CLI 
				API Calls.
				
					As a root user Login to AWS Console. 
						- Email_ID & Password 
						
					- Create IAM Users 
					
				At Enterprise level : Root User Account 
				
					User1
					User2
					User3

					50 Teams -- Each has 100 Members
				
					AWS Account -> 
					
						Free Tier Account 
						
							- Usage 
							Billing Dashboard 
							
							
					AWS Cloud 
					
						Regions 
							Availability Zones (Data Centers) 
								Server1,2,3,4,5
									Virtual Machines 
										Runs Operating System (Amazon Machine Image)
											Runs Applications
									
			1. AWS EC2 Instances ::
			
				Virtual Machines are refered as EC2 Instances
				
					Application ::
							To run an application :
							
								Computing Device 
								
							Operating System acts as an interface between User Applications and Underlying hardware.
			
			Why we use AWS Account?
			
				To Create Virtual Machines 
					To install and work with DevOps Tools like Jenkins, Docker,....
				Storage, security groups...
					
					
			How to Create EC2 Instance
			
				How to Connect to Ec2 Instance : https://aws.amazon.com/console/
				
					- EC2 Instance Connect  == through aws console using web browser.
					
					- SSH Client 
						- Is a agent installed in the local machine.	
							- MobaXterm 	https://mobaxterm.mobatek.net/download.html							
							- Putty
						
					- Using Terminal
					
			Authentication ::
				
				Password Based Authentication
				Token Based Authentication
				
				Key Based Authentication
					- Private & Public Key 
				
				Passwordless Authentication
			
		
				
				1 VM  ==> 750 Hrs/Month
				10 VM ==> 75 Hrs/Month
			
		
					
				
			0 to 1 year DevOps Trained Resource.
			
			
			Linux OS - Ubuntu Distribution.
			
				Operating System
			
						Operating System acts as an interface between User Applications and Underlying hardware.
						
					Windows OS  
					Linux OS 	(Open-Source Operating System)
						Distribution -
							- Ubuntu 
							- Centos / rhel / fedora 					
					Mac OS 
					
			
########################
21st Nov. 2023
########################	

		AWS Fundamentals :::
		  
		  Create VMs
		  Connect with VMs
		  Work with VMs
		  
			VMs --> AMI -- Ubuntu/Windows/Mac ==> Server templates
			
				--> Login 
				--> Linux Command to work with VMs.
				
				Linux - OS 
				
				Admin related activities :::
				
					- Work with Application Packages.
					
					
			VM -
			
				Public IP Address  	--> Used to access the VM thru external network
									--> It is NOT a permanent IP Address
									
									13.232.50.178
									52.66.204.121
									
				Private IP Address 	--> Used to access the VM within internal network
									--> It is a permanent IP Address
									
									172.31.45.173
				
				Admin related activities :::
				
					- Work with Application Packages.		

						In Linux;
							- root user 	==> Considered as admin user with full access to Linux Machine.
												Using this, we can install/Uninstall/Upgrade the packages
							- general user 	==> ubuntu ==> 
							
							
						Linux Distributions :::
							Linux OS 	(Open-Source Operating System)
								Distribution -
									- Ubuntu 									==> apt-get (or) apt
									- Centos / rhel / fedora(Previous_Version) 	==> yum 	
									- Fedora(Latest Version)					==> dnf 
									- 
							Package Manager ::: It is utility through which we can manage the packages in Linux Machines.
							
								In windows --> *.exec file
							
							- Update the default packages.
								
								clear
								sudo -i
								apt update -y
								apt install maven -y 			# Install maven build tool
								mvn --version
								apt remove maven -y
								
								git 	
								apt install git -y 
								
							Types of Packages :::
								tools 
								zipfileformat
								service 		===> 
								
								git/maven/ansible 		== tool 
								jenkins/docker/tomcat 	== service ==> It should be enable with default port
								
								Tomcat  ==> Web Application Server == Used to run web applications
								
							Installation procedures :::
							
								1. Install the pre-requisites 
								2. Install the Actual tool 
								3. Perform Post_Installation Activities
								
							It is always recommended to use the official documentation to do the package management
							
							
							Install & Configure Jenkins Server :
							
								- Refer to that tools/Service's Official Documentation.
											https://www.jenkins.io/doc/book/installing/linux/

# Install Jdk:

sudo -i 			
sudo apt update -y
sudo apt install openjdk-11-jre -y 						# previous version
java -version						
								
#Install Jenkins:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update

sudo apt-get install jenkins -y


jenkins --version 

systemctl status jenkins 

Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://43.205.118.56:8080/

cat /var/lib/jenkins/secrets/initialAdminPassword



			Jenkins installation path ::::
			
			
							
					Which port is used to connect to Linux VM ? 
							
					Security Group :::
					
						Is used define the Inbound(Allows Incomming Traffic) and Outbound(Allows Out going Traffic) rules 
						
						
					
			Linux Modules -> 
		  
Summary :::	

		Launching Ubuntu VM in AWS 
		Connect to VM using Mobaxterm 
		Login as root user 
		Install/update/remote the package using apt package manager
		Install and Configure Jenkins 
			- Know about default port for jenkins
			- Security Group :
				- Configure Inbound & Out Bound Rules
			- Install Jenins - with all its pre-requisites
			- Perform post installation activities
			- Access Jenkins using http://<Public_IP_Address>:8080/
		

########################
23rd Nov. 2023
########################		
			
			
		- Overview of AWS Services 
		
		- Linux Fundamentals.
			
			
		- Overview of AWS Services 	::

			- EC2 Instance Service
			
			- IAM 
					User_Group 			
						User_IDs
					
					Dev Team :
						Dev_Group 		==> need access to SQL_Database.
							5 members = +50 users 
					https://310817730195.signin.aws.amazon.com/console
					
					RBAC --> Role Based Access Control.
								developer/admin/manager
					
			- Storage - S3 / EBS / EFS
			
					Web application ==> Target Environment(VM) --> to run the we appln. I need some config files...
					1TB of volume +1TB
					
			- Database - DynamoDB / RDS 
			
			- Security Groups ::::
					jenkins -- 8080 
					
					Inbound Rules 		==> Incomming Traffic 
					OutBound Rules		==> Out Going Traffic. 		
			
			
			- Developer Services ...
			
			AWS Provided DevOps Services ::::
			
				DevOps Requirement :::
				
					-- DevOps Tools Stack! 
								Open Source DevOps Tools 
									GIT 
									Jenkins 
									Ansible 
									Terraform
									Docker
									Kubernetes
									Prometheus
									Grafana
								
								Managed Services 
								
									AWS   12 month free tier 	
										Code Pipeline 
										Code Build / Test 
										Code Deploy 										
									
									Azure DevOps Services ::: --> 
									
										200 USD --> 1 Month 
									
									
									
									GCP 
									
									
						Hybrid Cloud ::
						
							On-Premises
								
								
							Cloud(AWS)
							
						
						Continous Delivery / Deployment using DevOps 
						
						
			CI/CD Pipeline ::
			
			
			Lifecycle of DevOps 
			
				Code 
				
						
						
						
						
						
									
									
				DevOps -->
				
					- Assessment Phase ::
						
					- Recommendations!
						Open Source (or)
						 Managed Service 
						 
							On-Premises Environments 
						 
							-> Cloud Adoption 			==> Azure Platform 
							-> DevOps Implemetation 	==> Azure DevOps Services 
							
							
						AWS 	--> Infra-Structure 
						
						DevOps 	--> 
						
						
Next ::
		
		Pre-requisite - Create and Access EC2 Instance (Ubuntu)
		
		Linux Fundamentals ::: Tasks 
		AWS Fundamentals - Assignments.
		
		
########################
24th Nov. 2023
########################



		Linux Fundamentals :::
		
			Linux is Open Source Operating System 
			
			Operating System --> 
			
			Hardware 
			
			Operating System ==> Acts as an interface between User Applications and Hardware.
								 Reliable OS 
								 Light weight 
								 easy to install and Manage.
								 Secured 
								 Core of Linux Operating System --> Kernel
								 
								 Control Groups 
								 Namespaces 
			
			Desktop/Laptop/Mobile ==

					Windows 
					Linux 
					
			DevOps --> Reliable Operating System (Linux)
			
				DevOps Team :::
				
			Types of Linux :::
				Linux was build using Unix OS.
				
				Basically, Linux is CUI - Command User Interface.
				
					Distributions ::: 			Package Manager(are user to Install/update/remove packages in Linux Machines)
					
						Debian 					apt-get / apt  
						Ubuntu			 		apt-get / apt  
						Fedora 					yum / dnf 
						Centos 					yum 
						RHEL 					yum 
						Amazon Linux 			yum / dnf 	
						
					Package Manager :::
					
						Software/tools/package   
						Package - Install/update/remove 
						
				GUI - Graphical User Interface 	
					
				
			Implementation ::::
			
				Where we use Linux ???
				
				Environments ::::
				
					Dev Environment
					
					Testing Environment
					
					Production Environment
					
				Non-Prod Environments 							===>			Production Environments
				
					Dev Server/VM (W/L)
					
					Test 
					
						QA 
						
						UAT 									===> 				Prod Environment
				
				
			On DevOps Level :::
			
				CICD Pipeline 
				
					Jenkins server 	(Linux OS)
					
					Build Server 
					
					Test Server 
					
					Deployment Servers 
					
					
				
			Developers ??
			
				- Just the consumers.
				
			
			Linux Administrators :::
			
				--> Entire Linux Servers and all its associated components 
					License/Security compliances/Cost 
					Memory Management 
					Process Management 
					Security Management 
						
			
			DevOps Engineers' roles and responsibilities on Linux Machines :::
			
			
				-	Manage Users in Linux environments
						Create User and Manage the Users.
				- 	Install and Manage all the required software/packages in Linux
				- 	Manage the Package 
							Upgrade - Best practises involved
							Define access 
				- 	File Management 
						- 	Create/Read/Update/Delete 
						-	Grant Access to other users in the machine
						-	Directories / Folders
				-	Handle remote servers:
						- Establish communication with other systems in the network
						- SSH - Secure SHell	
							User_ID & Valid Authentication.
							
								Types of Authentications :::
								
									Password based Authentication
									Key based Authentication***********
									Token based Authentication 
									Passwordless Authentication									
				-	Shell Scripts 
						- piece of code written using linux shell commands 
						- It is to automate some set of tasks.
					


		
			Practicals :: 
			
				AWS Cloud Platform ::
					
					- Create a EC2 Instance - Ubuntu
					- Connect and Work with Linux Commands 
					
					
				Shell Commands ::
				
					
				- 	File Management 
						- 	Create/Read/Update/Delete 
						-	Grant Access to other users in the machine
						-	Directories / Folders	

					File System :

						Drive C: D:
							Folders & Files with its path.
				
				pwd --> present work Directory
				
				Navigate to file system and directories :::
				
					root directory 
					
						cd /
						
					home directory 
					
						cd ~
						
						
				ubuntu --> home directory --? /home/ubuntu 
				
				root directory 				/
				
				
				cd 		--> Change Directory
				
				ls - used to get the list of files & folders.
				
				mkdir == used to create a dir 
				
				cd <folder_name>
				
				cd .. 
				
				echo "Hello"
				
				create file :
				
				echo "Hello" >> file1.txt 
				
				cat file.txt			#read the file 
				
				
				touch file2.txt			# Create Empty file
				
				
			drwxrwxr-x
			
			-rw-rw-r-- 
				
				
Summary ::

		File & Directories 
		
			Create Directories
			Create  Files
			
    1  sudo -i
    2  clear
    3  hostname -i
    4  apt update -y
    5  sudo apt update -y
    6  sudo -i
    7  clear
    8  sudo -i
    9  pwd
   10  cd /
   11  pwd
   12  cd /
   13  cd ~
   14  pwd
   15  cd lear
   16  clear
   17  pwd
   18  cd /
   19  pwd
   20  clear
   21  cd ~
   22  pwd
   23  ls
   24  cd ~
   25  cd /
   26  ls
   27  pwd
   28  cd home
   29  pwd
   30  ls
   31  cd ubuntu/
   32  pwd
   33  sudo -i
   34  cd /etc/
   35  ls
   36  clear
   37  cd /
   38  ls
   39  cd ~
   40  ls
   41  sudo -i
   42  clear
   43  pwd
   44  ls
   45  mkdir dir1
   46  ls
   47  pwd
   48  ls
   49  cd dir1
   50  ls
   51  pwd
   52  mkdir sub-dir1
   53  ls
   54  cd sub-dir1/
   55  pwd
   56  cd ~
   57  clear
   58  mkdir folder1
   59  ls
   60  cd folder1/
   61  pwd
   62  mkdir sub-dir1
   63  ls
   64  mkdir sub-dir2
   65  mkdir sub-dir3
   66  mkdir sub-dir4
   67  ls
   68  pwd
   69  ls
   70  cd sub-dir1
   71  mkdir subfolder1
   72  ls
   73  pwd
   74  cd subfolder1/
   75  pwd
   76  cd ..
   77  pwd
   78  cd ..
   79  clear
   80  ls
   81  cd sub-dir1
   82  pwd
   83  ls
   84  echo "Hello"
   85  echo "Hello" >> file1.txt
   86  ls
   87  cat file1.txt
   88  touch file2.txt
   89  ls
   90  cat file2.txt
   91  echo "Hello" >> file3.txt
   92  ls
   93  cat file3.txt
   94  echo "Hello" >> file3.txt
   95  cat file3.txt
   96  echo "Hello" >> file3.txt
   97  echo "Headfasdfasdllo" >> file3.txt
   98  echo "Hasdfasdfasddllo" >> file3.txt
   99  cat file3.txt
  100  echo "Hello Everyone" > file3.txt
  101  cat file3.txt
  102  ls
  103  clear
  104  ls
  105  echo "Hello Everyone" > asdfasdf
  106  ls
  107  cat asdfasdf
  108  clear
  109  ls
  110  ll
  111  clear
  112  ll
  113  cd subfolder1/ls
  114  cd subfolder1
  115  ls
  116  cd ..
  117  history

sudo -i

   53  apt update -y
   54  exit
   55  pwd
   56  exit
   57  clear
   58  cd /
   59  ls
   60  cd etc
   61  ls
   62  pwd
   63  exit
   64  ls
   65  exit
   66  history


########################
27th Nov. 2023
########################


		Linux File Management 
			
			create dir/
			create/update/delete/read ==> file
			
		User Management :::
		
		
		Linux File Management 
			
			create dir/
			create/update/delete/read ==> file
			
			
			What is shell > ==> Command line utility used to interact with Kernel of Linux OS
			
			cd 
			mkdir 
			echo 
			
			shell scripts ???
			
				collection of shell commands. ==> *.sh
				
			Linux File Management 
				
				create dir/
				create/update/delete/read ==> file
				
				Misc. Shell Commands for file handling!

					Create the directory :
						mkdir 
					
					Create a file :
						touch <file_name>						# used to create empty file 
						echo "record" >> <file_name>			# used to create file with contents 
						echo "record" > <file_name>				# used to replace the existing records 
						echo "record" 							# to prind the message.
						
						Using vi Editor 						# default file editor in Linux 
							vim/nano 
							
						vi <file_name> 							# Used to Edit the file.
						
						press i 								# get into insert mode .
						esc :wq 								# used to save the file and exit 
						ecs :q!									# used to exit the file without saving the changes.
						
					copy the files from one dir to another 
					
						cp <file_name> dir1/
							cp /home/ubuntu/nov27/file1.txt /home/ubuntu/dir1/	# Execute this from different location
							
							cp file1.txt /home/ubuntu/folder1					# Execute this from the file location
							
							wildcard symbols :
							
							cp *.* /home/ubuntu/folder1
							
							cp *.java /home/ubuntu/folder1
							
							cp file1.txt,file2.java /home/ubuntu/folder1
							
					
					move the files from one dir to another
						mv <file_name> dir1/
						
							mv  /home/ubuntu/nov27/file1.txt /home/ubuntu/dir1/	# Execute this from different location
							
							mv file1.txt /home/ubuntu/folder1					# Execute this from the file location
							
							wildcard symbols :
							
							mv *.* /home/ubuntu/folder1
							
							mv *.java /home/ubuntu/folder1						
						
						
					rename the file :::
					
							mv file1.txt newfile1.txt
							
					
					
					$ ll
					
					
					----------
					drwxrwxrwx			==> access level.
					-rwxrwxrwx		
							
							
							
					Owner 			of the file 
					
					Access Mode 	of the file 
			
					ubuntu 
					root 
					
					
					dev_team			group 1
						user1
						user2
						user3 
						
					test_team			group 2
						user4
						user5
						user6 
						user3
					
					user7	
					user8 
					user9 
						
					file1.txt ==> user1(owner) 			https://chmod-calculator.com/
					
					chmod 755 file1.sh
					
					-rw-rw-r--						# Default access mode.
					
					-rwxr-----
					
					-rwx--x--x						
					

					-rwx   		==> read,write,execute ==> Owner
						
					-rwxr--		==> Users part of the group can able to just read the file 
					
					-rwxr--r--  ==> Public users can able to just read the file
					
					
					How to customize the Access Mode :::
					
					chmod 
						
						
					rm <file_name>				# remove the file 
					
					rm -f <file_name>			# force remove the file
					
					rm -rf <dir_name>			# force remove the directory will all its sub-elements.(recursive)
					
					
					
					
					----------
	                
					-						==> Denotes the type of the object (file/dir)
					
					  ---					===> Owner level access 					  
						 ---				===> The group level access 
						    ---				===> The public user access 
					
					 ---					==> denotes the access level of the owner - read,write,execute
					 
					users and groups???
					
					dir/
					
						
				    -rwxrwxrwx	
					
					
			User Management::
				
					- Create and Manage the Linux users.
					- Create/Set Authentication for that user.
									Password Authentication
									Key Based Authentication
									
									
					- User Authentication & Authorization 
					- Authentication	==> Denotes Who can Access ?
					- Authorization		==> Denotes What can Accessible ?
					
					Linux : ubuntu and root 
					
					Eg. for Authentication ::
						both these users are authenticated to login to this Linux box.
						
					Eg. for Authorization ::
						Whether ubuntu user can able access /root dir?			NO 
						Whether root user can able access /home/ubuntu dir?		YES
						
				User Add Command to create users in Linux :::

					cat /etc/passwd 					# get the list of users in Linu Machines.
														# In windows Machine c:/users/
					
					cat /etc/group						# get the list of user-groups.

					useradd devopsuser1
							In Centos/RHEL, It create user_name,user's home directory, and default bash prompt
							In Ubuntu, It creates only the user_name 
							

					useradd -m -d /home/devopsuser1 devopsuser1
					
					
					In Ubuntu Machines ::: ******
					
						useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin
					
					su - devopsuser1 				# to login to that user.

Summary :
			file handling 
			cp/mv/rename/delete 
			
			useradd 
			
			:	useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin
	

Next : 

			Create Password & other Authentication methods like keys 
			How to handle remote servers.
				
				
				
					Build 
						--> 		compile and create artifacts ==> *.java / *.war
					deployment 
						--> 
						
					Environment ::
					
					Non-Prod					Prod Environment
					(VM1)	dev - build  / *.war
					(VM2)	qa 
					(VM3)	uat			====>			prod(VM) 
						
						
						
				
					cp ==> from dir1 to dir2 		# within a VM 

   67  clear
   68  ls
   69  exit
   70  clear
   71  ls
   72  vi sample1.txt
   73  ls
   74  pwd
   75  mkdir tempfolder1
   76  cd tempfolder1/
   77  vi sample2.txt
   78  pwd
   79  ls
   80  ll
   81  pwd
   82  cd /home/ubuntu/dir1/sub-dir1
   83  ls
   84  ll
   85  clear
   86  ls
   87  ll
   88  vi newfile1.txt
   89  cat newfile1.txt
   90  clear
   91  ls
   92  echo "echo hello" >> testscript.sh
   93  cat testscript.sh
   94  clear
   95  ls
   96  ll
   97  clear
   98  ls
   99  ll
  100  chmod 777 testscript.sh
  101  ll
  102  chmod 400 testscript.sh
  103  ll
  104  vi testscript.sh
  105  clear
  106  ll
  107  chmod 755 testscript.sh
  108  ll
  109  clear
  110  cd ..
  111  ls
  112  rm -rf sub-dir1/
  113  ls
  114  clear
  115  pwd
  116  ls
  117  cd l
  118  cd ..
  119  ls
  120  cd folder1/
  121  ls
  122  rm -rf sub-dir4
  123  ls
  124  rm f sub-dir3
  125  clear
  126  ls
  127  touch f1.txt
  128  ls
  129  rm f1.txt
  130  ls
  131  clear
  132  cd ~
  133  cd /etc/passwd
  134  cat /etc/passwd
  135  cd /etc/
  136  ls
  137  clear
  138  ls
  139  cat /etc/groups
  140  cat /etc/group
  141  clear
  142  cd ~
  143  useradd devopadmin1
  144  su - devopadmin1
  145  cd /home/
  146  ls
  147  useradd -m -d /home/devopsuser1 devopsuser1
  148  cd ~
  149  su - devopsuser1
  150  useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin
  151  su - devopsadmin
  152  cat /etc/passwd
  153  cat /etc/group
  154  clear
  155  su - devopsadmin
  156  exit
  157  passwd devopsadmin
  158  history


########################
28th Nov. 2023
########################

		Remote server handling :::
		Linux Scripting :::
		
				useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin


		Remote server handling::
		
			What is the need for remote server?
			
			
		DevOps :::
		
			Development :::	==> 
			
				Environments ==> Computing Devices (Virtual Machine/Containers/On-Premises Servers)
			
				Development Environment 
						==> Used by Developers ---> Java  
						==> They Coding and development of projects - IDEs 
				
				Build Environment
						==> Used by Developers 
						==> To build the Code == Compile and create artifacts(Binaries) --> *.war
				
				Test Environment - QA(Quality Assurance Testing), UAT(User Acceptance Testing) 
						
						==> Used by the Testing Teams
						==> Automated Testing of Application
						
				Target/Hosted/Production Environment - LIVE Servers
			
		Environment			CI/CD 
		
			Non-Prod										Production Environment
			
				Dev
				Test 
					QA 
					UAT 				====>					Prod Environments
		
		Local Windows Machine ::: 
		
			AWS EC2 Instance : VM ( Remote Server)
				- How to connect with remote server from local Machine ?
						Host Name/Host IP Address & User_Name & Authentication Keys ==> SSH(Secure SHell Protocal(Rules to establish connection to remote servers)
						
						
			Deployment --> Is a process of copying the artifacts from a source server to target servers.
			
					Virtual Machine :
					
						Build_Folder ==> payment.war 
						
						Copy this artifacts to Target_Folder in the same Machine. 
						
						cp payment.war Target_Folder
						
					Build_Server payment.war
					
					Test_Server :
					
						1. Establish Conection to Test Server 
						2. Authentication
						3. Perform Deployment 
						
						
ls
ls -a		
		
			Demo :::
				
				1. Create 2 VMs 
				2. Create User_Name in each VM 
				3. Create SSH Keys for Authentication
				4. Establish Connection to Remote server
				5. Gain access to Remote Servers.
						
CUI - Command User Interface :: shell and bash are types of CUI

#Login to Client Machine. Perform below activities:

#Add User in Client/Target Machine : 

sudo -i

useradd devopsuser1 -s /bin/bash -m -d /home/devopsuser1

passwd devopsuser1

#Enter New Password:
#Confirm Password:

#Goto:

vi /etc/ssh/sshd_config

#Enable Password Authentication to Yes and save the file
#Execute Below command to update the changes.

service sshd reload

su - devopsuser1

ls -a 				# Show the list of all files & folders including hidden files and folders

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Login to Server:

#Add User in Server/Source Machine : 

sudo -i

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#for Ubuntu ::
ssh-keygen -t rsa -b 1024 -m PEM
cd .ssh

#id_rsa  		==> Private key 
#id_rsa.pub		==> Public key

ssh-copy-id devopsuser1@172.31.3.16

#Type yes for confirmation
#Enter the password for devopsuser1

#### Verify the key copied in Server under /home/devopsuser1/.ssh/

ssh devopsuser1@172.31.3.16


scp file1.txt devopsuser1@172.31.3.16:/home/devopsuser1				
			
			
########################
30th Nov. 2023
########################		
		
		Linux Scripting :::
		
			CLI / CUI ==> Used to interact with Operating System 
				shell / bash(Unix/Linux) are the terms refers this CUI/CLI 
						
						
			cp / mv 
			
			source file & Target dir.
			
			file1.txt 			target : /home/ubuntu/desti
			
			cp file1.txt /home/ubuntu/desti
				
				
				
/home/ubuntu~$ cp file1.txt /home/ubuntu/desti

/home/ubuntu~$ cp /home/ubuntu/source_dir1/file1.txt /home/ubunut/desti

/home/ubuntu/deve1~$ cp /home/ubuntu/source_dir1/file1.txt /home/ubunut/desti

/home/ubuntu~$ cp file1.txt file2.txt *.java /home/ubuntu/desti

		Linux Scripting :::
		
			Software Program :	==> set of instructions given the Computers to perform some task.
					
			Programming Languages :::				
					==> are used to develop some Business Applications(Banking/Retail/Insurance)
									C/C++/Java/C#/ASP/JSP/Angular/PHP/python
									Application Frameworks - .Net/Spring boot
									
			Scripting Languages :::
					==> are light weight 
					==> are used to create some process automation/Validations
									shell scripting/python scripting/java scripting/yaml scripting/groovy scripting
									
									
				--> Linux Machine ==>  30 GB of Storage 
							Build_Server(VM)	Application Build ==> compile & Create artifacts -- *.war
										1000's of micro services 
										
								periodic Monitoring -- every day / every one hour
										If the memory utilization reaches 28GB(for Eg.)
											- Clean up the unwanted files from the server
											- Add More volumes +20GB
											
								Automation ::
									Automatically Monitor the Build_Server, Able to cleanup the storage/add more volumes 
								
				-->	E_Commerce Portal :
						User_Registration Process :
						
					3 - Tier Application Architecture ::: 
						Front-End Layer 
						Application Layer 
						BackEnd - Database Layer 
				
					Client Side Scripting ::: 
							Validate the user inputs at the client side itself without hitting the Server side.
			
		On DevOps Perspective ::
		
			Scripting Knowledge for DevOps Engineers ::
				shell scripting/yaml scripting/groovy scripting/Python Scripting
				
					- Process Automation:
					
		Fundamentals of Shell/Linux Scripting ::			
					
					
			- set of instructions are the building blocks for programs to perform any task:::
			
			
			Task :::
				
					1. Calculate sum of 2 numbers ::: 
					
						1. read input 1 & 2 
						2. c = a + b 
						3. print c
						
						
			Logic of a program/script. Logical Thinking!
			
			
			
		Technicals :::
		
			Linux Scripting Language ::
				
				
				Building-Blocks / Concepts of Programming/Scripting Languages :::
				
				Entire IT Tools/Software are used to deal with Data.
				
					- Variable 		==> 5 ==> x = 5
					- Type --> DataTypes 
								5 = Numeric data 
								"Hello" = String/Alphabet
								"xyz123" = Alpha--numeric
					- Size of data 
						Declare  the variables with datatypes :
								int a = 5;
								a = 5
						Variable :
							stud_Name = "adfasdf"
							stud_Name[5] = {"adsf","adsf","asdf","asdf","asdf"}
					- Array
					- 		stud_Name = 121231231
							Stud_Age  = 25 or 27 or 99
							
					- Validation :
							IF, switch-case statements 
					- Iterations :
							for loop / while / do-while looping constructs
					- File Handling concepts :
							Sequential file used to store some sequential data.
								file operations : create/open/read/write/update/delete 
					- Data base :
						 Relational DataBase Mgmt System :
							Tables : rows/Columns 
							
							Stud_Reg.Numbr		stud_Name  			Stud_Age
							1001				asdfasdfs			25
							1002				adfasasdfasd		27
					
					- Remote servers and transfer these data!
							Data 	== plural 
							datum	== singular
						 
				
				
		Scripting :::

			Write the Scripts ::::
			
				1. Requirement Analysis 
				2. Design 
				3. Code 
				4. Testing 
				5. Implementation
				
		
	
		Requirement :
		
			Algorithms
			
			Psudo-Code
			
		Calculate sum of 2 numbers ::: 
			
				1. Read the input value 1 	==> String!
				2. Read the input value 2
				3. Calculate c as sum of val1 & val2 
				4. Display the value of c
			
				
			Any Programming/Scripting Languages to implement this.
			
			Exception/Error Handling 
			
			
		Find Maximum of three numbers ????		23 45 12
				
				Algorithm :::
					Is written in high - level language
					It defines the step by step instructions to achieve  a specific task. 
					It is not based on any Programming/Scripting Language
						
		
		Calculate sum of n numbers				????
		
				n = 10
					1,1,1,1,1,1,1,1,1,1		==> 

		
		Print "Hello" 
		
			Linux Script ""
			
				echo "Hello" 
				
		Print "Hai"
		
		Print 5 
		
		Print '*'
		
			echo "*"
			
		* * * * *	

		
		*****
		 ***
		  *

		
		5 5 5 5 5
		 4 4 4 4
		  3 3 3
		   2 2
		    1
		
		
		variable ==> PinNumber ===> 987654321 
			 - To reverse the given Numbers. 
					==> 123456789
		
		Variable ==> Strings ==>  HelloEveryone
		
			 - To Reverse the given string of letters...
			 
		Prime Numbers ????
		
			1,2,3,4,5,6,7,8,9
			
			1 => If the given number is prime number, print it is prime number 
				 If the given number is NOT a prime number, print it is NOT prime number
		
			
		
###############
1st Dec. 2023
###############	
	 
		Linux Scripting - core concepts.
		
			Linux Scripts ==> It is collection of Linux Commands.
			
			samplescript.sh  ==> Extension.
			
			# Commented Line    ==> To explain about the script/Documentation purpose.
			
			
			Create a directory ::
			
				mkdir scripts 
				cd scripts
				vi samplescript.sh 
					press i 			# insert mode 
					
					#!/bin/bash 
					echo "Hello"
					
					press esc :wq 
					
					ll 
					
					chmod 755 samplescript.sh
					
					./samplescript.sh
					
				Scenario :::	
					Remote servers :::
						
						Team == 5 Developers --> Need GIT, JDK, Maven Tools to be installed in their machines.		

					Administrators :
					
						Create installdevtools.sh
						
							#!/bin/bash 
							# This is to install dev tools.
							echo "Installing dev tools "
							sudo apt update -y
							sudo apt install git -y 
							sudo apt install Openjdk11 -y
							sudo apt install maven -y
						
						Local Machine (VM)	--> Dev1,2,3,4,5
						
						scp 						
						cp 						
						IAC - Infra-Structure As Code -  Tools like Ansible 
						
				
				Operators :::
				
					- Arithmetic Operator ==> + - * /
					
					- Comparison Operators ==> eq gt lt ne 
					
					- Logical Operator :: AND OR NOT
							Used to implement some complex conditions.
							
					- Conditional Statements :
					
						IF then Else fi
						
						

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print the calender month by default.

Source Code:

#!/bin/bash
#	     
echo "The Month is"
cal # cal command displays current month by default


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to read user input and perform operations with them.

Source Code:

#!/bin/bash
#

echo -n "Enter number 1 : " # -n option supresses newline
read NUM1 # Read the user input from Standard Input and store in Variable NUM1

echo -n "Enter number 2 : "
read NUM2

SUM=$(($NUM1 + $NUM2)) # Arithmetic expansion using double parentheses
echo "The sum is $SUM"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A script to show usage of if condition

#Operators :: 6 Operators

Source Code:

#!/bin/bash

NUM1=1 # variabe assignment
NUM2=2

if [ $NUM1 -gt $NUM2 ] # -gt is to test integer numbers
then
    echo "NUM1 > NUM2"
fi




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if else condition

Source Code:

#!/bin/bash

NUM1=2 # Variabe assignment
NUM2=5

if [ $NUM1 -lt $NUM2 ]  # -lt is to test integer numbers
then
    echo "NUM1 < NUM2"
else
    echo "NUM1 > NUM2"
fi


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of else if condition

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

if [ $NUM -gt 0 ]
then
    echo "$NUM is +ve"
elif [ $NUM -lt 0 ]
then
    echo "$NUM is -ve"
else
    echo "$NUM is 0"
fi

echo "done"


###########################################################
syntax of if then elif else statement

operators ::: 
Arithmetic ==>  + - * / %
Logical
Relational
bitwise 


== > < != >= <=

-eq -gt -lt -ne -ge -le


comparison/conditional/Relational


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:  a e i o u

#!/bin/bash

echo -n "Enter a character: "
read CHAR

case $CHAR in
	a) echo "You entered $CHAR which is a vowel";;  # ;; Terminates each option
	e) echo "You entered $CHAR which is a vowel";;
	i) echo "You entered $CHAR which is a vowel";;
	o) echo "You entered $CHAR which is a vowel";;
	u) echo "You entered $CHAR which is a vowel";;
	*) echo "You entered $CHAR which is not a vowel";; # Defaults to everything else
esac







~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR

case $CHAR in
	a | A) # Test for both Lower or Upper case letter
		# You may write commands in this fashion too!!, means multiline commands
		echo "You entered $CHAR which is a vowel"
		;; # Terminates each option
	e | E) 
		echo "You entered $CHAR which is a vowel"
		;;
	i | I) 
		echo "You entered $CHAR which is a vowel"
		;;
	o | O) 
		echo "You entered $CHAR which is a vowel"
		;;
	u | U) 
		echo "You entered $CHAR which is a vowel"
		;;
	*)  # Defaults to everything else
		echo "You entered $CHAR which is not a vowel"
		;;
esac


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Oceans are larger than lakes (True or False) : "
read USER_INPUT

case $USER_INPUT in
	"TRUE"| "True" | "true")
		echo "Yes you are right"
		;; # Terminates each option
	"FALSE" | "Fasle" | "false")
		echo "No your are wrong"
		;;
	*)  # Defaults to everything else
		echo "Please enter either True or False"
		;;
esac

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of string compare operator = and !=

Source Code:

#!/bin/bash

STR1="Hello"
STR2="Hello"

if [ ${STR1} = ${STR2} ]
then
    echo "Strings match"
else
    echo "Strings don't match"
fi
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of string compare operator -z and -n

Source Code:

#!/bin/bash

STR1="Hello"
STR2="Hello"

if [ -z "${STR1}" ]
then
    echo "String1 is empty"
else
    echo "String1 is NOT empty"
fi

echo ":$STR:"
if [ -n "${STR2}" ]
then
    echo "String2 is NOT empty"
else
    echo "String2 is empty"
fi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of logical operators

Source Code:

#!/bin/bash

echo -n "Enter a NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using AND -a operator)
if [ $NUM -ge 10 -a $NUM -le 20 ]
then
    echo "$NUM is between 10 and 20"
else
    echo "$NUM is NOT between 10 and 20"
fi

echo -n "Enter another NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using OR -o operator)
if [ $NUM -lt 10 -o $NUM -gt 20 ]
then
    echo "$NUM is NOT between 10 and 20"
else
    echo "$NUM is between 10 and 20"
fi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage while loop

Source Code:

#!/bin/bash
#

COUNT=0

while [ $COUNT -lt 5 ]
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done

echo "Done"



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sum of N natural numbers using while loop

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

let SUM=0; 
let I=1
while [ $I -le $NUM ]
do
	SUM=`expr $SUM + $I`
	I=$((${I} + 1))
done

echo "The sum of the first $NUM numbers is: $SUM"










~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ Bash syntax ]

Source Code:

#!/bin/bash
#

COUNT=0

for i in 0 1 2 3 4
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


























A simple script to demonstarte for loop [ C syntax ]

Source Code:

#!/bin/bash

COUNT=0

for ((i = 0; i < 5; i++))
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done







#!/bin/bash
#

COUNT=0

while [ $COUNT -lt 5 ]
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done



			
###############
5th Dec. 2023
###############			


			Shell ==> 
			
				ansible 
				yaml 
				python 
				
			Scenario 1:
			
					Production Server --> 3 servers 		# To ensure High Availability.
					
						Up and running! 24/7 
						Manage this thru automation ??
						
						Monitor Tools -- 	Prometheus/Dynatrace this will monitor and send alerts
											Script - Linux-Shell/Python/Yaml/Groovy ==> Scale up the servers
											
						
					E_Commerce Application ==> 3 servers  == 10000 users ==> 50000 users ==> 1000 usrs 
					
					Scale up the servers 3 + 2 + 2
					scale down the servers 2 
					
					incomming traffic 					
					cpu 
					memory 
					
					
					
					
					Deployment ::
					
						copy the artifacts from non-prod environment to prod environment
						
							UAT server to prod server  - 1 VM to deploy ???
							
							Network Traffic 
							
							On-Line Ticket Booking System 

		Scripting ::::

			The should be generic.
			
				We should not hard-code any constant values in the script.
				
			To write a generic program/script always we should pass the arguments during the progam call or function call.
				
				
Source Code:

#!/bin/bash
#

echo -n "Enter number 1 : " # -n option supresses newline
read NUM1 # Read the user input from Standard Input and store in Variable NUM1

echo -n "Enter number 2 : "
read NUM2

SUM=$(($NUM1 + $NUM2)) # Arithmetic expansion using double parentheses
echo "The sum is $SUM"				
					
			
			
		Handling the functions """
		
			Function ?? What & Why ?
				Functions are some set of instructions that are written and invoked in the script.
				Functions are used to define set of instructions that are very frequently used.
				i.e., The Script can be composed of many functions. 
				It is used to eleminate the duplication of codes.
				Used to reuse the logic at any suitable level.
				
				
		How to Write a script with functions :::
		
			- 
			
			
			1 Application Team want to automate build. - compile and create artifacts.
			
				Script -- Build Tools maven - perform build
				
			100 Application Teams want to do the same task.???
			
				e
		
		
		Array ::
		
			It is group of elements with same name and datatype.
			
		Stud_Reg_Number1 : 1001 
		Stud_Reg_Number2
		Stud_Reg_Number3
		Stud_Reg_Number4
		Stud_Reg_Number5
		
		Stud_Reg_Number (1001 1002 1003 1004 1005)
						   0	1	 2	  3    4		# Index 
						   
						   
			# Index is used to uniquely identify the array element
			# It always start with 0.
				
		Stud_Reg_Number[2] ==> 1003
		
		
		Stud_Reg_Number[4] ==> 1005			


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of command line arguments, Here we access positional arguments using $1, $2 …

Source Code:

#!/bin/bash

echo "Total no. of argument: $#"

echo "Program name: $0"
echo "1st argument: $1"
echo "2nd argument: $2"
echo "3rd argument: $3"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

samplearg1.sh

./samplearg1.sh 12 12 12 12 


#!/bin/bash

NUM1=$1
NUM2=$2

SUM=$(($NUM1 + $NUM2)) # Arithmetic expansion using double parentheses
echo "The sum is $SUM"	

./sumdemo1.sh 23 23




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of function

Source Code:

#!/bin/bash

# Function definition
function print_hello()
{
    	echo "====="
    	echo "Hello"
    	echo "====="
}

# Call the function - print_hello
print_hello
print_hello
print_hello


Function Definition 

Function Call.



	E_Commerce Portal:
	
		User_Registration Process 			service1 
				- name,email_id,phone_#
					
						email_id : _______________  # zasdf@gmail.com / asfasdf234234
				
				
		Login 								service2 
				- email_id,password 
			
						email_id : _______________  # zasdf@gmail.com / asfasdf234234
		
		

		Email_ID_Validation()
		{
			asdfasdasdf
			asdfasdasdfas
			df
			aasdfasdf
			200 lines of code 
			
		}
		



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show how to declare an array and access its elements

Source Code:

#!/bin/bash

num=(5 3 4 5 5) 

# Declare an array
FRUITS=(apple mango banana orange)

# Print value of each element
echo "element 0: ${FRUITS[0]}"
echo "element 1: ${FRUITS[1]}"
echo "element 2: ${FRUITS[2]}"
echo "element 3: ${FRUITS[3]}"

# Print size / length of array
echo "Length: ${#FRUITS[@]}"
echo "Whole array: ${FRUITS[@]}"

echo "Looping over array elements"
# Iterate over array elements
for ITEM in ${FRUITS[@]}
do
    echo $ITEM
done


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demostrate usage of sed command

Source Code:

#!/bin/bash

# Basic text substitution using sed
echo "Bash Scripting Language" | sed 's/Bash/Perl/'

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			
Next ::

		AWS & Linux Assignment Questions.
		Best Practises. -- reference commands --> List linux commands are used on daily basis.
		Module-2 
		
		
					
			
			
					
			
			
				
			
			
			
			
				
					
