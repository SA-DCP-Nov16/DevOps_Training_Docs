###############
2nd Jan. 2024
###############	

Jenkins - Build Orchestration Tool :::

		DevOps 
		
			Continuous Development 
			
		Jenkin's Is a open source Build Orchestration Tool 
		
			- It is based on Master/Slave Architecture
			
		SDLC : 	
			
			Automated Build 		- Compile & Create artifacts 	 Tool : Maven 
			
			Automated Testing		- Testing - Unit Testing 		 Tool : Junit / Selenium 
			
			Automated Deployment 	- Code Promotion 				 Tool : Docker/Kubernetes/Ansible
			
			Automated Monitoring	- Monitoring CPu/Memory/Traffic  Tool : Prometheus/Grafana

		Jenkin's Is a open source Build Orchestration Tool 
		
			- It is based on Master-Slave Architecture	

			- It is used to automate the process of Continuous Integration/C_Delivery/C_Deployment/C_Testing/C_Monitoring.
			
		Jenkins Architecture:

			Jenkins Master(VM) 	--> Here we install Jenkins,
									Create Jenkins Jobs/Project - CICD Pipeline Projects
									Schedule the Jenkins Jobs in the respective Slave Nodes.
			
				Jenkins Slave Node(VM)	--> Is used to actually perform the application builds
				
				
			@Enterprise level, Application Teams ::::  Team1 - Java Project, Team2 - Python, Team3 - Angular/Nodejs/.net
			
			
			Jenkin_Master (VM)				# Install jdk, jenkins
											# Create Jenkins Jobs/Project - CICD Pipeline Projects
											# Schedule the Jenkins Jobs in the respective Slave Nodes.
											
				Jenkins_Slave_Node1	(VM)	# Build Java Applications 
				Jenkins_Slave_Node2			# Build Python Applications 
				Jenkins_Slave_Node3			# Build NodeJS Applications 
				Jenkins_Slave_Node4			# Build Angular/React Applications 
				Jenkins_Slave_Node5			# Build .Net Applications 
				
				
		Working with Jenkins :::
		
			Jenkins can be used ::
			
				Developer's Perspective :::
				
					- Developers are just the consumers of Jenkins Projects.
				
				
				DevOps Team's Perspective :::
				
					- Jenkins Administrators 
				
					Roles & Responsibilities in Jenkins :::
					
						- Owner of Jenkins Master and Slave Nodes 
						- Complete Administration of Jenkins and its process
						- Installation of jenkins 
						- Management of Jenkins Plugins 
						- User Management 
						- Tools Management
						- Jenkins System Management 
						- Credential Management 
						- Creation and Management of Jenkins Slave Nodes
						- Security/Access Management 
						- Creation of CICD Pipeline Projects 
						- Onboard Application for DevOps CICD Automation 
						- Troubleshooting the issues 
						- Backup and Recovery 
						- Upgrades of Jenkins Servers and Plugins
						
		
		In Jenkins we used groovy as a scripting Language to create CICD Automation.
		
		
		Other Build Orchestration Tools in Market :
		
			AWS Code Pipelines 			# yaml scripts!!!!
			Azure Pipelines 
			gitlab-ci 
			bamboo 
			
		Installation & Configuration of Jenkins :::
		
			AWS Cloud Platform :::
			
				Launch Ubuntu 20.04 (VM)
						Install - git, jdk, jenkins 
				Jenkins can be accessed using web browser!
					open the default Jenkins port - 8080
		
			
		https://www.jenkins.io/doc/book/installing/	

Installation procedures :::

	1. Install the pre-requisites 
	2. Install the Actual tool 
	3. Perform Post_Installation Activities
	
It is always recommended to use the official documentation to do the package management


Install & Configure Jenkins Server :

	- Refer to that tools/Service's Official Documentation.
				https://www.jenkins.io/doc/book/installing/linux/

1. Install the pre-requisites :::

# Install Jdk:

sudo -i 			
sudo apt update -y
sudo apt install openjdk-11-jre -y 						# previous version
java -version						

2. Install the Actual tool :::
 								
#Install Jenkins:

sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

sudo apt-get update

sudo apt-get install jenkins -y


3. Perform Post_Installation Activities :::

jenkins --version 

systemctl status jenkins 

Open web browser :

http://<Public_IP_Address>:8080/

E.g.: http://43.205.118.56:8080/

cat /var/lib/jenkins/secrets/initialAdminPassword



###############
4th Jan. 2024
###############	


		- Installation of jenkins 
		
			Jenkins Installation Path ::
			
				/var/lib/jenkins
			
			- Installation of jenkins 
			- Management of Jenkins Plugins 
			- User Management 
			- Tools Management
			- Jenkins System Management 
			- Credential Management 
			- Security/Access Management

			Jenkins Projects/Jobs :::
			
				Free style Projects 		-- It is based on the manual configurations.
				
				
				Pipeline Projects 			-- It is based the groovy scripts. 
	
	
		Variables :::
		
			Parameterized Jobs/Projects.
			
			Types :
			
				Environment Variables
				
					echo "${BUILD_NUMBER}"
					
				User-Defined Variables


###############
5th Jan. 2024
###############	

		Variables :::
		
			Parameterized Jobs/Projects.
			
			Types :
			
				Environment Variables
				
					echo "${BUILD_NUMBER}"
					
				User-Defined Variables
					It is used to parameterize the Jenkins Projects
					
				a = 5 
				
		
		Jenkins Pipeline Project ::::
		
		
			Jenkins Pipeline is composed of various Stages :::
			
					- Pipeline Projects :
							It is based on the Scripts - groovy scripts.
							It is composed of various stages.
							
					DevOps Approach ::
							
							Source Development --> Create the code and update the code in a source code repository.
						
						Automated thru DevOps Approach :
						
							Pick the code, 
							Perform Automated Build 
							Perform Automated Unit Testing 
							
							Promote the code for further testing
							Notify the testing team 
						
						Maven Goal - clean package(build,unit_testing,create artifacts)
		
			- Scripted Pipeline ::
			
			- Declarative Pipeline ::
		
pipeline {
	   agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				echo 'Perform Build'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
				sh "mvn clean package"
            }
        }
        stage('Deploy to QA Environment') {
            steps {
                echo 'Deploy to QA'
            }
        }
    }
}		
		
		Creation of Pipeline Projects

		Creation and Management of Jenkins Slave Nodes

			Jenkin_Master (VM)				# Install jdk, jenkins
											# Create Jenkins Jobs/Project - CICD Pipeline Projects
											# Schedule the Jenkins Jobs in the respective Slave Nodes.
											
				Jenkins_Slave_Node1	(VM)	# Build Java Applications

		Create and Configure Jenkins Slave Node ::::
		
		
				Jenkins_Master(VM) 				Tools: git, jdk, jenkins 
					Jenkins_Slave_Node1(VM)		Tools: git, jdk, maven
				Through SSH, connect the Jenkins Master & Slave Nodes
		
		
		
#Configure Slave Node1 for Java Maven App. :

Launch an Ubuntu Machine : 

sudo -i

apt update -y 

Install Java ::

sudo apt update -y 
sudo apt install openjdk-11-jre -y
java -version

Install GIT :

sudo apt install git -y

Install Maven - Build Tool :
https://maven.apache.org/install.html

sudo apt install maven -y 


Create User in Jenkins Slave Machine & Create SSH Keys 

	SSH Keys --> is composed of public and private keys 


#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh


In Jenkins Master - Add Node Configuration
		
		Goto Manage Jenkins - Add New Node Configuration
		
		Create Application Build using Maven in Slave Node 
		

		- User Defined Variables 
		- Create and configure Jenkins Slave Node 
		- Configure Nodes in Jenkins Master
		- Create Jenkins Pipeline

		
###############
8th Jan. 2024
###############

pipeline {
	   agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				echo 'Perform Build'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
				sh "mvn clean package"
            }
        }
        stage('Deploy to QA - Server') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
            }
        }
        stage('Deploy to UAT  Server') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
            }
        }
    }
}		


		Deploy the artifacts to Test Environment 
		
		Environment ::
		
			Non-Prod										==> 	Prod Environment
			
			DEV 
			BUILD (VM) create artifacts 
			TEST 
				QA (VM) - tomcat to run the application
				UAT 										==> 		Production Environment
				
				
		Continuous Development 
		
		Continuous Integration 
		
		Continuous Testing 
		
		Continuous Delivery / Deployment 
		
		
		- Create Test Environment / Tomcat Server Configuration

######################Install TOMCAT Application Server on Ubuntu :::

sudo -i

sudo apt update -y 


sudo apt install openjdk-11-jre -y 
java -version

#edit /etc/profile & add JAVA_HOME

#/usr/lib/jvm/java-11-openjdk-amd64/

vi /etc/profile

java-11-openjdk-amd64


export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile

Install Tomcat ::  https://tomcat.apache.org/download-80.cgi

https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.97/bin/apache-tomcat-8.5.97.tar.gz

cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.97/bin/apache-tomcat-8.5.97.tar.gz

tar -xvzf /opt/apache-tomcat-8.5.97.tar.gz

mv apache-tomcat-8.5.97 tomcat

#Start Tomcat Server:
#Goto:

cd /opt/tomcat/bin
./startup.sh

###########################################

#Add User : 



useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
ssh-keygen -t rsa -b 2048 -m PEM


ls ~/.ssh 

#You should see following two files:

#id_rsa - private key
#id_rsa.pub - public


cat id_rsa.pub > authorized_keys

chown -R devopsadmin /home/devopsadmin/.ssh
chmod 600 /home/devopsadmin/.ssh/authorized_keys
chmod 700 /home/devopsadmin/.ssh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#make devopsadmin user as a owner to tomcat dir :

chown -R devopsadmin /opt/tomcat

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Deployment ???
	
		Copy the artifacts from the source server to the target server :
		
		
			Source Server : Jenkins_Slave 								Target Server : Tomcat 
			
				Source File?												Target Path ?
				
					target/mvn-hello-world.war									/opt/tomcat/webapps


	Connect Tomcat Server with Jenkins :::
	
		Using Publish over SSH Plugin.
		
			Login to Jenkins Server 
			
			Install Publish over SSH Plugin & Restart Jenkins 
			
			Configure the Target Server in Jenkins Master using Publish over SSH Plugin.
	
	

		- Deploy the Artifacts to Tomcat Server thru Jenkins 

pipeline {
	   agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				echo 'Perform Build'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
				sh "mvn clean package"
            }
        }
        stage('Deploy to Tomcat - Server') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
            }
        }
    }
}		

		
		- Run the application 
		
		- Build Triggers 
		
				Build Periodic 			- used to schedule the job to run at specific time.
										- scheduling can be done using Cron Tabs 
										- Triggers the Jenkins Jobs based on schedule.									
										
				
				GITHUB Webhook
				
				Poll SCM 
				

		
		- Email Notifications 
		
		- Continuous Delivery and Deployment Pipelines


###############
9th Jan. 2024
###############		

		- Build Triggers 
		
				Build Periodic 			- used to schedule the job to run at specific time.
										- scheduling can be done using Cron Tabs 
										- Triggers the Jenkins Jobs based on schedule.	
										
										Eg.: Scheduled to run the job at a specific time. @8AM
				
				GITHUB Webhook
				
							- Webhook is used to trigger the CI/CD pipeline project whenever the commit happened in the source code repository.
							- Configure github webhook payload url in github repo. 
							
							<public_ip_Address>:8080/github-webhook/
							
							http://65.2.148.251:8080/github-webhook/
				
				Poll SCM 

							- PollSCM is used to trigger the CI/CD pipeline project for the commit happened in the source code repository and based on the crontab scheduled.
							
							As per our schedule, the job will be triggered for every one minute, ONLY if there is any changes happened in the source repository.
							
					Build Cycle 
					
					Test Cycle 		- 8AM,12PM,3PM 
					
					Release Cycle 

							
		- Email Notifications 
		
				Email Notifications can be sent at 3 situations :
				
					Succussful 
					Failure 
					Unstable

pipeline {
	   agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				echo 'Perform Build'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
              post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'loksai23@gmail.com', body: "${BUILD_URL} The Job Status", cc: 'loksai23@gmail.com', from: '', replyTo: '', subject: 'SCM Checkout Failed', to: 'loksai23@gmail.com'
                }
              }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
				sh "mvn clean package"
            }
              post {
                failure {
                  sh "echo 'Send mail on Build failure'"
					mail bcc: 'loksaieta223@gmail.com', body: 'The Job Status', cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'Maven Build Failed', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
                }
              }
        }
        stage('Approve Deployment to QA'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
        stage('Deploy to Tomcat - Server') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
            }
              post {
                success {
                  sh "echo 'Send mail on Success'"
					mail bcc: 'loksaieta223@gmail.com', body: 'The Job Status', cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'Deployment to QA Successful', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
                }
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'loksaieta223@gmail.com', body: 'The Job Status', cc: 'loksaieta223@gmail.com', from: '', replyTo: '', subject: 'Deployment to QA Failed', to: 'loksaieta223@gmail.com,loksaieta223@gmail.com,loksaieta223@gmail.com'
                }
              }
        }
    }
}		

		
		- Continuous Delivery and Deployment Pipelines		
		
pipeline {
	   agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				echo 'Perform Build'
				git 'https://github.com/LoksaiETA/Java-mvn-app2.git'
            }
        }
        stage('Maven Build') {
            steps {
                echo 'Perform Maven Build'
				sh "mvn clean package"
            }
        }
        stage('Approve Deployment to QA'){
            steps{
                
                //----------------send an approval prompt-------------
                script {
                   env.APPROVED_DEPLOY = input message: 'User input required Choose "yes" | "Abort"'
                       }
                //-----------------end approval prompt------------
            }
        }
        stage('Deploy to Tomcat - Server') {
            steps {
				script {
				sshPublisher(publishers: [sshPublisherDesc(configName: 'Tomcat-Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
            }
        }
    }
}				
		Access Token ????
		
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#
App Password = 16 bytes of App Password. 
What ? window
Which Appln - email
		

Next Module :: Docker & Kubernetes!
